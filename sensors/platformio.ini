; ==============================================================================
; ESP32 Temperature Sensor Network - Configuration
; All settings can be overridden in specific environments
; ==============================================================================

; Default configuration - inherited by all environments
[env]
platform = espressif32
framework = arduino
monitor_speed = 115200
lib_deps = 
    WiFi
    HTTPClient
    ArduinoJson

; === NETWORK CONFIGURATION ===
build_flags = 
    ; WiFi Settings
    -DWIFI_SSID=\"FromTheLandOfKansas\"
    -DWIFI_PASSWORD=\"Kansas_6614!\"
    -DSERVER_ENDPOINT=\"http://192.168.8.123:8080/ingest\"
    
    ; ESP-NOW Receiver MAC (update with your receiver's MAC)
    -DRECEIVER_MAC_0=0xFF
    -DRECEIVER_MAC_1=0xFF  
    -DRECEIVER_MAC_2=0xFF
    -DRECEIVER_MAC_3=0xFF
    -DRECEIVER_MAC_4=0xFF
    -DRECEIVER_MAC_5=0xFF
    
    ; Node Configuration
    -DNODE_ID=\"sensor_01\"
    -DNODE_LOCATION=\"livingroom\"
    -DNODE_TYPE=\"temperature\"
    
    ; Hardware Pin Configuration
    -DSENSOR_PIN=36
    -DBATTERY_PIN=3
    -DNTC_POWER_PIN=5
    -DSTATUS_LED_PIN=2
    
    ; Sensor Configuration
    -DSENSOR_TYPE=\"NTCLE100E3103JB0\"
    -DR_FIXED=12500.0
    -DBETA=3977.0
    -DT0_TEMP=298.15
    -DR0=10000.0
    
    ; Timing Configuration (minutes)
    -DNORMAL_SLEEP_MINUTES=15
    -DSAFE_SLEEP_MINUTES=60
    -DEMERGENCY_SLEEP_MINUTES=240
    
    ; Power Management
    -DBATTERY_SAFE_THRESHOLD=2.4
    -DBATTERY_NORMAL_THRESHOLD=2.6
    -DBATTERY_CRITICAL_THRESHOLD=2.2
    -DMAX_FAILED_TRANSMISSIONS=3
    
    ; Mesh Configuration
    -DMESH_RELAY_ENABLED=true
    -DMESH_RELAY_LIMIT=3
    -DSAFE_MODE_AUTH=0xDEADBEEF
    
    ; Feature Flags
    -DBATTERY_POWERED=false
    -DSAFE_MODE_CONTROL_ENABLED=true
    -DUSE_BATTERY_VOLTAGE_DIVIDER=false
    -DUSE_POWER_GATING=false

; ==============================================================================
; ENVIRONMENT DEFINITIONS
; ==============================================================================

; Original ESP32 Development Board (for reference)
[env:esp32dev]
board = esp32dev
build_src_filter = +<main.cpp>
board_build.f_cpu = 80000000L
board_build.f_flash = 40000000L
board_build.flash_mode = dout
upload_resetmethod = nodemcu

; ESP32-C3 Development Board  
[env:esp32c3]
board = esp32-c3-devkitm-1
build_src_filter = +<main.cpp>
board_build.f_cpu = 160000000L
board_build.f_flash = 40000000L
board_build.flash_mode = dout
upload_resetmethod = nodemcu

; ESP-NOW Battery Transmitter (Ultra Low Power)
[env:battery_transmitter]
board = esp32-c3-devkitm-1
build_src_filter = +<battery_transmitter.cpp>
board_build.f_cpu = 80000000L        ; Low CPU frequency for power savings
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=1             ; Minimal debug output
    -DCONFIG_ESP32_WIFI_AMPDU_TX_ENABLED=0  ; Disable WiFi aggregation
    -DCONFIG_ESP32_WIFI_AMPDU_RX_ENABLED=0
    ; Override specific settings for battery transmitter
    -DBATTERY_POWERED=true
    -DUSE_BATTERY_VOLTAGE_DIVIDER=false
    -DUSE_POWER_GATING=true
upload_resetmethod = nodemcu

; ESP-NOW Receiver/Gateway (Mains Powered)
[env:espnow_receiver]
board = esp32dev
build_src_filter = +<espnow_receiver.cpp>
board_build.f_cpu = 240000000L       ; Full performance for gateway
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=3             ; Full debug output
    ; Override specific settings for mains receiver
    -DNODE_ID=\"receiver_gateway\"
    -DBATTERY_POWERED=false
    -DMESH_RELAY_ENABLED=true
    -DSAFE_MODE_CONTROL_ENABLED=true
upload_resetmethod = nodemcu

; ESP-NOW Mesh Node (Battery Powered)
[env:mesh_node]
board = esp32-c3-devkitm-1
build_src_filter = +<espnow_receiver.cpp>
board_build.f_cpu = 160000000L       ; Balanced performance/power
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=2             ; Moderate debug output
    ; Override specific settings for battery mesh node
    -DNODE_ID=\"mesh_node_01\"
    -DBATTERY_POWERED=true
    -DUSE_BATTERY_VOLTAGE_DIVIDER=true
    -DBATTERY_SAFE_THRESHOLD=3.8
    -DBATTERY_NORMAL_THRESHOLD=4.0
    -DBATTERY_CRITICAL_THRESHOLD=3.4
    -DMESH_RELAY_ENABLED=true
    -DSAFE_MODE_CONTROL_ENABLED=true
upload_resetmethod = nodemcu

; Recovery/Debug Transmitter (No Deep Sleep)
[env:recovery_transmitter]
board = esp32-c3-devkitm-1
build_src_filter = +<recovery_transmitter.cpp>
board_build.f_cpu = 240000000L       ; Full performance for debugging
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=5             ; Maximum debug output
    ; Override specific settings for recovery mode
    -DBATTERY_POWERED=false          ; Assume USB power for debugging
    -DNORMAL_SLEEP_MINUTES=0         ; No sleep for debugging
upload_resetmethod = nodemcu

; ==============================================================================
; EXAMPLE ENVIRONMENTS - Copy and modify these for your deployment
; ==============================================================================

; Example: Bedroom Sensor
[env:bedroom_sensor]
extends = env:battery_transmitter
build_flags = 
    ${env:battery_transmitter.build_flags}
    ; Custom configuration for bedroom
    -DNODE_ID=\"bedroom_01\"
    -DNODE_LOCATION=\"master_bedroom\"
    -DNORMAL_SLEEP_MINUTES=30        ; Longer interval for bedroom
    -DSAFE_SLEEP_MINUTES=120
    -DRECEIVER_MAC_0=0x30           ; Replace with your receiver's MAC
    -DRECEIVER_MAC_1=0xAE
    -DRECEIVER_MAC_2=0xA4
    -DRECEIVER_MAC_3=0x07
    -DRECEIVER_MAC_4=0x0D
    -DRECEIVER_MAC_5=0x64

; Example: Living Room Mesh Hub
[env:living_room_hub]
extends = env:mesh_node
build_flags = 
    ${env:mesh_node.build_flags}
    ; Custom configuration for living room hub
    -DNODE_ID=\"living_room_hub\"
    -DNODE_LOCATION=\"living_room\"
    -DWIFI_SSID=\"YourNetworkName\"   ; Override WiFi for this location
    -DWIFI_PASSWORD=\"YourPassword\"
    -DSERVER_ENDPOINT=\"http://192.168.1.100:8080/ingest\"  ; Different server

; Example: Outdoor Sensor (Extended Range)
[env:outdoor_sensor]
extends = env:battery_transmitter
build_flags = 
    ${env:battery_transmitter.build_flags}
    ; Custom configuration for outdoor deployment
    -DNODE_ID=\"outdoor_01\"
    -DNODE_LOCATION=\"backyard\"
    -DNORMAL_SLEEP_MINUTES=60        ; Longer intervals for outdoor
    -DSAFE_SLEEP_MINUTES=240
    -DBATTERY_SAFE_THRESHOLD=2.3     ; More conservative for cold weather
    -DUSE_BATTERY_VOLTAGE_DIVIDER=true  ; Monitor battery closely

; Original WiFi Version (for comparison)
[env:wifi_original]
board = esp32-c3-devkitm-1
build_src_filter = +<main.cpp>
board_build.f_cpu = 80000000L
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=3             ; Full debug for comparison

; ULP RISC-V Ultra-Low Power Receiver
[env:ulp_receiver]
board = esp32-c3-devkitm-1
build_src_filter = +<ulp_receiver.cpp>
board_build.f_cpu = 160000000L       ; Higher freq for ESP-NOW processing
board_build.f_flash = 40000000L
board_build.flash_mode = dout
board_build.cmake_extra_args = 
    -DCONFIG_ESP32C3_ULP_RISCV_ENABLED=y
    -DCONFIG_ULP_COPROC_ENABLED=y
    -DCONFIG_ULP_COPROC_TYPE_RISCV=y
build_flags = 
    ${env.build_flags}               ; Inherit default configuration
    -DCORE_DEBUG_LEVEL=1             ; Minimal debug for power savings
    
    ; ULP Receiver Configuration
    -DNODE_ID=\"ulp_rx_01\"
    -DNODE_LOCATION=\"remote_outdoor\"
    -DNODE_TYPE=\"ulp_receiver\"
    
    ; ULP-specific Hardware Pins (must be ULP-accessible)
    -DULP_NTC_PIN=0                  ; GPIO0 -> ULP_GPIO0, ADC1_CH0
    -DULP_BATTERY_PIN=1              ; GPIO1 -> ULP_GPIO1, ADC1_CH1
    -DSTATUS_LED_PIN=2               ; Main CPU controlled
    
    ; Ultra-Low Power Timing (minutes)
    -DNORMAL_INTERVAL_MIN=15         ; 15 min normal operation
    -DSAFE_INTERVAL_MIN=60           ; 60 min safe mode
    -DEMERGENCY_INTERVAL_MIN=120     ; 120 min emergency mode
    
    ; Battery Management (millivolts)
    -DBATTERY_SAFE_THRESHOLD_MV=3800 ; 3.8V safe threshold
    -DBATTERY_CRITICAL_THRESHOLD_MV=3400 ; 3.4V critical threshold
    
    ; NTC Thermistor Configuration
    -DTHERMISTOR_BETA=3977
    -DTHERMISTOR_R0=10000
    -DPULLUP_RESISTANCE=10000
    
    ; ESP-NOW Configuration (set receiver MAC)
    -DRECEIVER_MAC='{0x24,0x6F,0x28,0xAB,0xCD,0xEF}' ; Update with actual receiver MAC
    
    ; ULP-specific build flags
    -DCONFIG_ESP32C3_ULP_RISCV_ENABLED
    -DCONFIG_ULP_COPROC_ENABLED
    -DULP_RISC_V_ENABLED

; ULP Receiver with custom MAC and location
[env:ulp_receiver_shed]
extends = env:ulp_receiver
build_flags = 
    ${env:ulp_receiver.build_flags}
    ; Custom configuration for shed deployment
    -DNODE_ID=\"ulp_shed_01\"
    -DNODE_LOCATION=\"equipment_shed\"
    -DRECEIVER_MAC='{0x24,0x6F,0x28,0x12,0x34,0x56}' ; Shed-specific receiver
    -DNORMAL_INTERVAL_MIN=30         ; Longer intervals for shed
    -DSAFE_INTERVAL_MIN=120
    -DEMERGENCY_INTERVAL_MIN=240

; ULP Receiver for greenhouse
[env:ulp_receiver_greenhouse]
extends = env:ulp_receiver
build_flags = 
    ${env:ulp_receiver.build_flags}
    ; Custom configuration for greenhouse deployment
    -DNODE_ID=\"ulp_greenhouse_01\"
    -DNODE_LOCATION=\"greenhouse\"
    -DRECEIVER_MAC='{0x24,0x6F,0x28,0x78,0x9A,0xBC}' ; Greenhouse-specific receiver
    -DNORMAL_INTERVAL_MIN=20         ; Medium intervals for greenhouse
    -DSAFE_INTERVAL_MIN=90
    -DEMERGENCY_INTERVAL_MIN=180
    -DBATTERY_SAFE_THRESHOLD_MV=3700 ; Lower threshold for greenhouse warmth

; ESP32-C3 Coin Cell Test (Simplified for Battery Validation)
[env:coin_cell_test]
board = esp32-c3-devkitm-1
build_src_filter = +<coin_cell_test.cpp>
board_build.f_cpu = 80000000L
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    -DCORE_DEBUG_LEVEL=3             ; High debug level
upload_speed = 115200                ; Lower upload speed for reliability

; ESP32-C3 Recovery Firmware (No Deep Sleep)
[env:recovery_test]
board = esp32-c3-devkitm-1
build_src_filter = +<recovery_test.cpp>
board_build.f_cpu = 80000000L
board_build.f_flash = 40000000L
board_build.flash_mode = dout
build_flags = 
    -DCORE_DEBUG_LEVEL=3             ; High debug level
upload_speed = 115200                ; Lower upload speed for reliability
